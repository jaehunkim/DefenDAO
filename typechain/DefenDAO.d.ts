/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DefenDAOInterface extends ethers.utils.Interface {
  functions: {
    "EXECUTE_BALANCE_THRESHOLD()": FunctionFragment;
    "cancelOffer(uint256,uint256)": FunctionFragment;
    "claimNFTs(uint256[])": FunctionFragment;
    "claimableNFTs(uint256)": FunctionFragment;
    "curFloorPrice()": FunctionFragment;
    "defenDAOFactory()": FunctionFragment;
    "execute(uint256,((address,address,tuple[],tuple[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),tuple[],bytes32)": FunctionFragment;
    "getAllOffers(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getClaimableNFTs(address)": FunctionFragment;
    "getOfferBalanceAddrOrdersLength(uint256)": FunctionFragment;
    "getUserOffers(address,uint256)": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "makeOffer(uint256,uint256)": FunctionFragment;
    "marketplaceAddress()": FunctionFragment;
    "nftAddress()": FunctionFragment;
    "offerBalanceAddrOrders(uint256,uint256)": FunctionFragment;
    "offerBalanceSum(uint256)": FunctionFragment;
    "offerPriceUnit()": FunctionFragment;
    "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": FunctionFragment;
    "onERC1155Received(address,address,uint256,uint256,bytes)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "random(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "reserve()": FunctionFragment;
    "selectRandomAddresses(address[],uint256[],uint256,uint256)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userClaimableNFTs(address,uint256)": FunctionFragment;
    "userOfferBalances(uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "EXECUTE_BALANCE_THRESHOLD",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNFTs",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimableNFTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "curFloorPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "defenDAOFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      BigNumberish,
      {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOffers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableNFTs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferBalanceAddrOrdersLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOffers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "marketplaceAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nftAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "offerBalanceAddrOrders",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerBalanceSum",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "offerPriceUnit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [string, string, BigNumberish[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "random",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "reserve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "selectRandomAddresses",
    values: [string[], BigNumberish[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userClaimableNFTs",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userOfferBalances",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "EXECUTE_BALANCE_THRESHOLD",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimNFTs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curFloorPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "defenDAOFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferBalanceAddrOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "marketplaceAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offerBalanceAddrOrders",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerBalanceSum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offerPriceUnit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "random", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reserve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "selectRandomAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userOfferBalances",
    data: BytesLike
  ): Result;

  events: {
    "CancelledOffer(address,uint256,uint256)": EventFragment;
    "MadeOffer(address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MadeOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CancelledOfferEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    price: BigNumber;
    offerCount: BigNumber;
  }
>;

export type MadeOfferEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    price: BigNumber;
    offerCount: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class DefenDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DefenDAOInterface;

  functions: {
    EXECUTE_BALANCE_THRESHOLD(overrides?: CallOverrides): Promise<[number]>;

    cancelOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimNFTs(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimableNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    curFloorPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    defenDAOFactory(overrides?: CallOverrides): Promise<[string]>;

    execute(
      price: BigNumberish,
      order: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      criteriaResolvers: {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      fulfillerConduitKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllOffers(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimableNFTs(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getOfferBalanceAddrOrdersLength(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserOffers(
      user: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      nftAddress_: string,
      marketplaceAddress_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketplaceAddress(overrides?: CallOverrides): Promise<[string]>;

    nftAddress(overrides?: CallOverrides): Promise<[string]>;

    offerBalanceAddrOrders(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    offerBalanceSum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    offerPriceUnit(overrides?: CallOverrides): Promise<[BigNumber]>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    random(
      nonInclusiveMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    reserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    selectRandomAddresses(
      addresses: string[],
      weights: BigNumberish[],
      weightSum: BigNumberish,
      numToSelect: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userClaimableNFTs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userOfferBalances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  EXECUTE_BALANCE_THRESHOLD(overrides?: CallOverrides): Promise<number>;

  cancelOffer(
    price: BigNumberish,
    offerCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimNFTs(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimableNFTs(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  curFloorPrice(overrides?: CallOverrides): Promise<BigNumber>;

  defenDAOFactory(overrides?: CallOverrides): Promise<string>;

  execute(
    price: BigNumberish,
    order: {
      parameters: {
        offerer: string;
        zone: string;
        offer: {
          itemType: BigNumberish;
          token: string;
          identifierOrCriteria: BigNumberish;
          startAmount: BigNumberish;
          endAmount: BigNumberish;
        }[];
        consideration: {
          itemType: BigNumberish;
          token: string;
          identifierOrCriteria: BigNumberish;
          startAmount: BigNumberish;
          endAmount: BigNumberish;
          recipient: string;
        }[];
        orderType: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        zoneHash: BytesLike;
        salt: BigNumberish;
        conduitKey: BytesLike;
        totalOriginalConsiderationItems: BigNumberish;
      };
      numerator: BigNumberish;
      denominator: BigNumberish;
      signature: BytesLike;
      extraData: BytesLike;
    },
    criteriaResolvers: {
      orderIndex: BigNumberish;
      side: BigNumberish;
      index: BigNumberish;
      identifier: BigNumberish;
      criteriaProof: BytesLike[];
    }[],
    fulfillerConduitKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllOffers(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimableNFTs(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getOfferBalanceAddrOrdersLength(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserOffers(
    user: string,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    nftAddress_: string,
    marketplaceAddress_: string,
    curFloorPrice_: BigNumberish,
    offerPriceUnit_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOffer(
    price: BigNumberish,
    offerCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketplaceAddress(overrides?: CallOverrides): Promise<string>;

  nftAddress(overrides?: CallOverrides): Promise<string>;

  offerBalanceAddrOrders(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  offerBalanceSum(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  offerPriceUnit(overrides?: CallOverrides): Promise<BigNumber>;

  onERC1155BatchReceived(
    operator: string,
    from: string,
    ids: BigNumberish[],
    values: BigNumberish[],
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC1155Received(
    operator: string,
    from: string,
    id: BigNumberish,
    value: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onERC721Received(
    operator: string,
    from: string,
    tokenId: BigNumberish,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  random(
    nonInclusiveMax: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  reserve(overrides?: CallOverrides): Promise<BigNumber>;

  selectRandomAddresses(
    addresses: string[],
    weights: BigNumberish[],
    weightSum: BigNumberish,
    numToSelect: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userClaimableNFTs(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userOfferBalances(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    EXECUTE_BALANCE_THRESHOLD(overrides?: CallOverrides): Promise<number>;

    cancelOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimNFTs(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimableNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    curFloorPrice(overrides?: CallOverrides): Promise<BigNumber>;

    defenDAOFactory(overrides?: CallOverrides): Promise<string>;

    execute(
      price: BigNumberish,
      order: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      criteriaResolvers: {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      fulfillerConduitKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllOffers(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableNFTs(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOfferBalanceAddrOrdersLength(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOffers(
      user: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      nftAddress_: string,
      marketplaceAddress_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    marketplaceAddress(overrides?: CallOverrides): Promise<string>;

    nftAddress(overrides?: CallOverrides): Promise<string>;

    offerBalanceAddrOrders(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    offerBalanceSum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerPriceUnit(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    random(
      nonInclusiveMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    selectRandomAddresses(
      addresses: string[],
      weights: BigNumberish[],
      weightSum: BigNumberish,
      numToSelect: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userClaimableNFTs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOfferBalances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "CancelledOffer(address,uint256,uint256)"(
      user?: string | null,
      price?: BigNumberish | null,
      offerCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; price: BigNumber; offerCount: BigNumber }
    >;

    CancelledOffer(
      user?: string | null,
      price?: BigNumberish | null,
      offerCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; price: BigNumber; offerCount: BigNumber }
    >;

    "MadeOffer(address,uint256,uint256)"(
      user?: string | null,
      price?: BigNumberish | null,
      offerCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; price: BigNumber; offerCount: BigNumber }
    >;

    MadeOffer(
      user?: string | null,
      price?: BigNumberish | null,
      offerCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; price: BigNumber; offerCount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    EXECUTE_BALANCE_THRESHOLD(overrides?: CallOverrides): Promise<BigNumber>;

    cancelOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimNFTs(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimableNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    curFloorPrice(overrides?: CallOverrides): Promise<BigNumber>;

    defenDAOFactory(overrides?: CallOverrides): Promise<BigNumber>;

    execute(
      price: BigNumberish,
      order: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      criteriaResolvers: {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      fulfillerConduitKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllOffers(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableNFTs(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferBalanceAddrOrdersLength(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOffers(
      user: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      nftAddress_: string,
      marketplaceAddress_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketplaceAddress(overrides?: CallOverrides): Promise<BigNumber>;

    nftAddress(overrides?: CallOverrides): Promise<BigNumber>;

    offerBalanceAddrOrders(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerBalanceSum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    offerPriceUnit(overrides?: CallOverrides): Promise<BigNumber>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    random(
      nonInclusiveMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    reserve(overrides?: CallOverrides): Promise<BigNumber>;

    selectRandomAddresses(
      addresses: string[],
      weights: BigNumberish[],
      weightSum: BigNumberish,
      numToSelect: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userClaimableNFTs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userOfferBalances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    EXECUTE_BALANCE_THRESHOLD(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimNFTs(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimableNFTs(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curFloorPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    defenDAOFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    execute(
      price: BigNumberish,
      order: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      criteriaResolvers: {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      fulfillerConduitKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllOffers(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableNFTs(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferBalanceAddrOrdersLength(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserOffers(
      user: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      nftAddress_: string,
      marketplaceAddress_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketplaceAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offerBalanceAddrOrders(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerBalanceSum(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    offerPriceUnit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    onERC1155BatchReceived(
      operator: string,
      from: string,
      ids: BigNumberish[],
      values: BigNumberish[],
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC1155Received(
      operator: string,
      from: string,
      id: BigNumberish,
      value: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      operator: string,
      from: string,
      tokenId: BigNumberish,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    random(
      nonInclusiveMax: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    reserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    selectRandomAddresses(
      addresses: string[],
      weights: BigNumberish[],
      weightSum: BigNumberish,
      numToSelect: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userClaimableNFTs(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userOfferBalances(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
