/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IDefenDAOFactoryInterface extends ethers.utils.Interface {
  functions: {
    "getAllInfos()": FunctionFragment;
    "getCollection(address)": FunctionFragment;
    "getRecentSolds()": FunctionFragment;
    "makeCollection(address,address,string,uint256,uint256)": FunctionFragment;
    "onTicketCountDiff(bool,uint256)": FunctionFragment;
    "recordRecentSold(address,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getAllInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentSolds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "makeCollection",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onTicketCountDiff",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordRecentSold",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getAllInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentSolds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "makeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTicketCountDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordRecentSold",
    data: BytesLike
  ): Result;

  events: {};
}

export class IDefenDAOFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDefenDAOFactoryInterface;

  functions: {
    getAllInfos(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCollection(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRecentSolds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeCollection(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onTicketCountDiff(
      arg0: boolean,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recordRecentSold(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getAllInfos(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCollection(
    arg0: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRecentSolds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeCollection(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onTicketCountDiff(
    arg0: boolean,
    arg1: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recordRecentSold(
    arg0: string,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getAllInfos(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, BigNumber, BigNumber] & {
        token: string;
        defenDAO: string;
        slug: string;
        totalTickets: BigNumber;
        offerPriceUnit: BigNumber;
      })[]
    >;

    getCollection(arg0: string, overrides?: CallOverrides): Promise<string>;

    getRecentSolds(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, string, string, string, string] & {
        token: string;
        nftId: BigNumber;
        price: BigNumber;
        claimer: string;
        defenDAO: string;
        tokenName: string;
        tokenImage: string;
      })[]
    >;

    makeCollection(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onTicketCountDiff(
      arg0: boolean,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    recordRecentSold(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    getAllInfos(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCollection(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRecentSolds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeCollection(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onTicketCountDiff(
      arg0: boolean,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recordRecentSold(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getAllInfos(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCollection(
      arg0: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRecentSolds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeCollection(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onTicketCountDiff(
      arg0: boolean,
      arg1: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recordRecentSold(
      arg0: string,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
