/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface DefenDAOFactoryInterface extends ethers.utils.Interface {
  functions: {
    "collectionToIndex(address)": FunctionFragment;
    "collectionToToken(address)": FunctionFragment;
    "getAllInfos()": FunctionFragment;
    "getCollection(address)": FunctionFragment;
    "getCollections(address)": FunctionFragment;
    "getRecentSolds()": FunctionFragment;
    "infos(uint256)": FunctionFragment;
    "makeCollection(address,address,string,uint256,uint256)": FunctionFragment;
    "onTicketCountDiff(bool,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "recentSolds(uint256)": FunctionFragment;
    "recordRecentSold(address,uint256,uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rsBeginIdx()": FunctionFragment;
    "rsEndIdx()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collectionToIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "collectionToToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllInfos",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollections",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecentSolds",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "infos", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "makeCollection",
    values: [string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "onTicketCountDiff",
    values: [boolean, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recentSolds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordRecentSold",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rsBeginIdx",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rsEndIdx", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "collectionToIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectionToToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecentSolds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "infos", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "makeCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onTicketCountDiff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recentSolds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordRecentSold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rsBeginIdx", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rsEndIdx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CollectionCreated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CollectionCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type CollectionCreatedEvent = TypedEvent<
  [string, string] & { token: string; collection: string }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class DefenDAOFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DefenDAOFactoryInterface;

  functions: {
    collectionToIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    collectionToToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAllInfos(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, string, string, BigNumber, BigNumber] & {
          token: string;
          defenDAO: string;
          slug: string;
          totalTickets: BigNumber;
          offerPriceUnit: BigNumber;
        })[]
      ]
    >;

    getCollection(token_: string, overrides?: CallOverrides): Promise<[string]>;

    getCollections(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getRecentSolds(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, string, string, string, string] & {
          token: string;
          nftId: BigNumber;
          price: BigNumber;
          claimer: string;
          defenDAO: string;
          tokenName: string;
          tokenImage: string;
        })[]
      ]
    >;

    infos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        token: string;
        defenDAO: string;
        slug: string;
        totalTickets: BigNumber;
        offerPriceUnit: BigNumber;
      }
    >;

    makeCollection(
      token_: string,
      marketplaceAddress_: string,
      slug_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onTicketCountDiff(
      isPlus: boolean,
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    recentSolds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string, string, string] & {
        token: string;
        nftId: BigNumber;
        price: BigNumber;
        claimer: string;
        defenDAO: string;
        tokenName: string;
        tokenImage: string;
      }
    >;

    recordRecentSold(
      token_: string,
      nftId_: BigNumberish,
      price_: BigNumberish,
      claimer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rsBeginIdx(overrides?: CallOverrides): Promise<[BigNumber]>;

    rsEndIdx(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collectionToIndex(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  collectionToToken(arg0: string, overrides?: CallOverrides): Promise<string>;

  getAllInfos(
    overrides?: CallOverrides
  ): Promise<
    ([string, string, string, BigNumber, BigNumber] & {
      token: string;
      defenDAO: string;
      slug: string;
      totalTickets: BigNumber;
      offerPriceUnit: BigNumber;
    })[]
  >;

  getCollection(token_: string, overrides?: CallOverrides): Promise<string>;

  getCollections(arg0: string, overrides?: CallOverrides): Promise<string>;

  getRecentSolds(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, string, string, string, string] & {
      token: string;
      nftId: BigNumber;
      price: BigNumber;
      claimer: string;
      defenDAO: string;
      tokenName: string;
      tokenImage: string;
    })[]
  >;

  infos(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, BigNumber] & {
      token: string;
      defenDAO: string;
      slug: string;
      totalTickets: BigNumber;
      offerPriceUnit: BigNumber;
    }
  >;

  makeCollection(
    token_: string,
    marketplaceAddress_: string,
    slug_: string,
    curFloorPrice_: BigNumberish,
    offerPriceUnit_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onTicketCountDiff(
    isPlus: boolean,
    ticketCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  recentSolds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string, string, string, string] & {
      token: string;
      nftId: BigNumber;
      price: BigNumber;
      claimer: string;
      defenDAO: string;
      tokenName: string;
      tokenImage: string;
    }
  >;

  recordRecentSold(
    token_: string,
    nftId_: BigNumberish,
    price_: BigNumberish,
    claimer_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rsBeginIdx(overrides?: CallOverrides): Promise<BigNumber>;

  rsEndIdx(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collectionToIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionToToken(arg0: string, overrides?: CallOverrides): Promise<string>;

    getAllInfos(
      overrides?: CallOverrides
    ): Promise<
      ([string, string, string, BigNumber, BigNumber] & {
        token: string;
        defenDAO: string;
        slug: string;
        totalTickets: BigNumber;
        offerPriceUnit: BigNumber;
      })[]
    >;

    getCollection(token_: string, overrides?: CallOverrides): Promise<string>;

    getCollections(arg0: string, overrides?: CallOverrides): Promise<string>;

    getRecentSolds(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, string, string, string, string] & {
        token: string;
        nftId: BigNumber;
        price: BigNumber;
        claimer: string;
        defenDAO: string;
        tokenName: string;
        tokenImage: string;
      })[]
    >;

    infos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, BigNumber] & {
        token: string;
        defenDAO: string;
        slug: string;
        totalTickets: BigNumber;
        offerPriceUnit: BigNumber;
      }
    >;

    makeCollection(
      token_: string,
      marketplaceAddress_: string,
      slug_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    onTicketCountDiff(
      isPlus: boolean,
      ticketCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    recentSolds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string, string, string, string] & {
        token: string;
        nftId: BigNumber;
        price: BigNumber;
        claimer: string;
        defenDAO: string;
        tokenName: string;
        tokenImage: string;
      }
    >;

    recordRecentSold(
      token_: string,
      nftId_: BigNumberish,
      price_: BigNumberish,
      claimer_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rsBeginIdx(overrides?: CallOverrides): Promise<BigNumber>;

    rsEndIdx(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CollectionCreated(address,address)"(
      token?: string | null,
      collection?: null
    ): TypedEventFilter<
      [string, string],
      { token: string; collection: string }
    >;

    CollectionCreated(
      token?: string | null,
      collection?: null
    ): TypedEventFilter<
      [string, string],
      { token: string; collection: string }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    collectionToIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    collectionToToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllInfos(overrides?: CallOverrides): Promise<BigNumber>;

    getCollection(
      token_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollections(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRecentSolds(overrides?: CallOverrides): Promise<BigNumber>;

    infos(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    makeCollection(
      token_: string,
      marketplaceAddress_: string,
      slug_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onTicketCountDiff(
      isPlus: boolean,
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    recentSolds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordRecentSold(
      token_: string,
      nftId_: BigNumberish,
      price_: BigNumberish,
      claimer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rsBeginIdx(overrides?: CallOverrides): Promise<BigNumber>;

    rsEndIdx(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collectionToIndex(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    collectionToToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllInfos(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollection(
      token_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollections(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecentSolds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    infos(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    makeCollection(
      token_: string,
      marketplaceAddress_: string,
      slug_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onTicketCountDiff(
      isPlus: boolean,
      ticketCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recentSolds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordRecentSold(
      token_: string,
      nftId_: BigNumberish,
      price_: BigNumberish,
      claimer_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rsBeginIdx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rsEndIdx(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
