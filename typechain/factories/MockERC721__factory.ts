/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockERC721, MockERC721Interface } from "../MockERC721";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604080518082018252600a8152694d6f636b45524337323160b01b6020808301918252835180850190945260048452634d45524360e01b90840152815191929162000060916000916200007f565b508051620000769060019060208401906200007f565b50505062000162565b8280546200008d9062000125565b90600052602060002090601f016020900481019282620000b15760008555620000fc565b82601f10620000cc57805160ff1916838001178555620000fc565b82800160010185558215620000fc579182015b82811115620000fc578251825591602001919060010190620000df565b506200010a9291506200010e565b5090565b5b808211156200010a57600081556001016200010f565b600181811c908216806200013a57607f821691505b602082108114156200015c57634e487b7160e01b600052602260045260246000fd5b50919050565b61140a80620001726000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806370a082311161008c578063a22cb46511610066578063a22cb465146101e1578063b88d4fde146101f4578063c87b56dd14610207578063e985e9c51461021a57600080fd5b806370a08231146101a557806395d89b41146101c6578063a0712d68146101ce57600080fd5b8063095ea7b3116100c8578063095ea7b31461015757806323b872dd1461016c57806342842e0e1461017f5780636352211e1461019257600080fd5b806301ffc9a7146100ef57806306fdde0314610117578063081812fc1461012c575b600080fd5b6101026100fd36600461111d565b610256565b60405190151581526020015b60405180910390f35b61011f6102a8565b60405161010e9190611205565b61013f61013a366004611155565b61033a565b6040516001600160a01b03909116815260200161010e565b61016a6101653660046110f4565b610361565b005b61016a61017a366004610faa565b61047c565b61016a61018d366004610faa565b6104ad565b61013f6101a0366004611155565b6104c8565b6101b86101b3366004610f5e565b610528565b60405190815260200161010e565b61011f6105ae565b61016a6101dc366004611155565b6105bd565b61016a6101ef3660046110ba565b6105ca565b61016a610202366004610fe5565b6105d9565b61011f610215366004611155565b610611565b610102610228366004610f78565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061028757506001600160e01b03198216635b5e139f60e01b145b806102a257506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546102b790611357565b80601f01602080910402602001604051908101604052809291908181526020018280546102e390611357565b80156103305780601f1061030557610100808354040283529160200191610330565b820191906000526020600020905b81548152906001019060200180831161031357829003601f168201915b5050505050905090565b600061034582610685565b506000908152600460205260409020546001600160a01b031690565b600061036c826104c8565b9050806001600160a01b0316836001600160a01b031614156103df5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b03821614806103fb57506103fb8133610228565b61046d5760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c00000060648201526084016103d6565b61047783836106e4565b505050565b6104863382610752565b6104a25760405162461bcd60e51b81526004016103d690611218565b6104778383836107d1565b610477838383604051806020016040528060008152506105d9565b6000818152600260205260408120546001600160a01b0316806102a25760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103d6565b60006001600160a01b0382166105925760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b60648201526084016103d6565b506001600160a01b031660009081526003602052604090205490565b6060600180546102b790611357565b6105c73382610942565b50565b6105d533838361095c565b5050565b6105e33383610752565b6105ff5760405162461bcd60e51b81526004016103d690611218565b61060b84848484610a2b565b50505050565b606061061c82610685565b600061063360408051602081019091526000815290565b90506000815111610653576040518060200160405280600081525061067e565b8061065d84610a5e565b60405160200161066e929190611199565b6040516020818303038152906040525b9392505050565b6000818152600260205260409020546001600160a01b03166105c75760405162461bcd60e51b8152602060048201526018602482015277115490cdcc8c4e881a5b9d985b1a59081d1bdad95b88125160421b60448201526064016103d6565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610719826104c8565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061075e836104c8565b9050806001600160a01b0316846001600160a01b031614806107a557506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b806107c95750836001600160a01b03166107be8461033a565b6001600160a01b0316145b949350505050565b826001600160a01b03166107e4826104c8565b6001600160a01b03161461080a5760405162461bcd60e51b81526004016103d6906112b7565b6001600160a01b03821661086c5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016103d6565b6108798383836001610b09565b826001600160a01b031661088c826104c8565b6001600160a01b0316146108b25760405162461bcd60e51b81526004016103d6906112b7565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6105d5828260405180602001604052806000815250610b91565b816001600160a01b0316836001600160a01b031614156109be5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016103d6565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b610a368484846107d1565b610a4284848484610bc4565b61060b5760405162461bcd60e51b81526004016103d690611265565b60606000610a6b83610cd1565b600101905060008167ffffffffffffffff811115610a9957634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015610ac3576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610afc57610b01565b610acd565b509392505050565b600181111561060b576001600160a01b03841615610b4f576001600160a01b03841660009081526003602052604081208054839290610b49908490611314565b90915550505b6001600160a01b0383161561060b576001600160a01b03831660009081526003602052604081208054839290610b869084906112fc565b909155505050505050565b610b9b8383610da9565b610ba86000848484610bc4565b6104775760405162461bcd60e51b81526004016103d690611265565b60006001600160a01b0384163b15610cc657604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610c089033908990889088906004016111c8565b602060405180830381600087803b158015610c2257600080fd5b505af1925050508015610c52575060408051601f3d908101601f19168201909252610c4f91810190611139565b60015b610cac573d808015610c80576040519150601f19603f3d011682016040523d82523d6000602084013e610c85565b606091505b508051610ca45760405162461bcd60e51b81526004016103d690611265565b805181602001fd5b6001600160e01b031916630a85bd0160e11b1490506107c9565b506001949350505050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610d105772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610d3c576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610d5a57662386f26fc10000830492506010015b6305f5e1008310610d72576305f5e100830492506008015b6127108310610d8657612710830492506004015b60648310610d98576064830492506002015b600a83106102a25760010192915050565b6001600160a01b038216610dff5760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016103d6565b6000818152600260205260409020546001600160a01b031615610e645760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103d6565b610e72600083836001610b09565b6000818152600260205260409020546001600160a01b031615610ed75760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016103d6565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80356001600160a01b0381168114610f5957600080fd5b919050565b600060208284031215610f6f578081fd5b61067e82610f42565b60008060408385031215610f8a578081fd5b610f9383610f42565b9150610fa160208401610f42565b90509250929050565b600080600060608486031215610fbe578081fd5b610fc784610f42565b9250610fd560208501610f42565b9150604084013590509250925092565b60008060008060808587031215610ffa578081fd5b61100385610f42565b935061101160208601610f42565b925060408501359150606085013567ffffffffffffffff80821115611034578283fd5b818701915087601f830112611047578283fd5b813581811115611059576110596113a8565b604051601f8201601f19908116603f01168101908382118183101715611081576110816113a8565b816040528281528a6020848701011115611099578586fd5b82602086016020830137918201602001949094529598949750929550505050565b600080604083850312156110cc578182fd5b6110d583610f42565b9150602083013580151581146110e9578182fd5b809150509250929050565b60008060408385031215611106578182fd5b61110f83610f42565b946020939093013593505050565b60006020828403121561112e578081fd5b813561067e816113be565b60006020828403121561114a578081fd5b815161067e816113be565b600060208284031215611166578081fd5b5035919050565b6000815180845261118581602086016020860161132b565b601f01601f19169290920160200192915050565b600083516111ab81846020880161132b565b8351908301906111bf81836020880161132b565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906111fb9083018461116d565b9695505050505050565b60208152600061067e602083018461116d565b6020808252602d908201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560408201526c1c881bdc88185c1c1c9bdd9959609a1b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526025908201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060408201526437bbb732b960d91b606082015260800190565b6000821982111561130f5761130f611392565b500190565b60008282101561132657611326611392565b500390565b60005b8381101561134657818101518382015260200161132e565b8381111561060b5750506000910152565b600181811c9082168061136b57607f821691505b6020821081141561138c57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146105c757600080fdfea26469706673582212202fe491ddb28a79ce80d9ffb233028740fc55cdf9fffa88453713b42ec3b52d2364736f6c63430008040033";

export class MockERC721__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockERC721> {
    return super.deploy(overrides || {}) as Promise<MockERC721>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockERC721 {
    return super.attach(address) as MockERC721;
  }
  connect(signer: Signer): MockERC721__factory {
    return super.connect(signer) as MockERC721__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockERC721Interface {
    return new utils.Interface(_abi) as MockERC721Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockERC721 {
    return new Contract(address, _abi, signerOrProvider) as MockERC721;
  }
}
