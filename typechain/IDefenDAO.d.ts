/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IDefenDAOInterface extends ethers.utils.Interface {
  functions: {
    "cancelOffer(uint256,uint256)": FunctionFragment;
    "claimNFTs(uint256[])": FunctionFragment;
    "execute(uint256,((address,address,tuple[],tuple[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint120,uint120,bytes,bytes),tuple[],bytes32)": FunctionFragment;
    "getAllOffers(uint256)": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getClaimableNFTs(address)": FunctionFragment;
    "getOfferBalanceAddrOrdersLength(uint256)": FunctionFragment;
    "getUserOffers(address,uint256)": FunctionFragment;
    "initialize(address,address,uint256,uint256)": FunctionFragment;
    "makeOffer(uint256,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "cancelOffer",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimNFTs",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [
      BigNumberish,
      {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOffers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableNFTs",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferBalanceAddrOrdersLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserOffers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "makeOffer",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "cancelOffer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimNFTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferBalanceAddrOrdersLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserOffers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeOffer", data: BytesLike): Result;

  events: {
    "CancelledOffer(address,uint256,uint256)": EventFragment;
    "MadeOffer(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CancelledOffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MadeOffer"): EventFragment;
}

export type CancelledOfferEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    price: BigNumber;
    offerCount: BigNumber;
  }
>;

export type MadeOfferEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    user: string;
    price: BigNumber;
    offerCount: BigNumber;
  }
>;

export class IDefenDAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IDefenDAOInterface;

  functions: {
    cancelOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimNFTs(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    execute(
      price: BigNumberish,
      advancedOrder: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      criteriaResolvers: {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      fulfillerConduitKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAllOffers(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getClaimableNFTs(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getOfferBalanceAddrOrdersLength(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getUserOffers(
      user: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      nftAddress_: string,
      marketplaceAddress_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    makeOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  cancelOffer(
    price: BigNumberish,
    offerCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimNFTs(
    tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  execute(
    price: BigNumberish,
    advancedOrder: {
      parameters: {
        offerer: string;
        zone: string;
        offer: {
          itemType: BigNumberish;
          token: string;
          identifierOrCriteria: BigNumberish;
          startAmount: BigNumberish;
          endAmount: BigNumberish;
        }[];
        consideration: {
          itemType: BigNumberish;
          token: string;
          identifierOrCriteria: BigNumberish;
          startAmount: BigNumberish;
          endAmount: BigNumberish;
          recipient: string;
        }[];
        orderType: BigNumberish;
        startTime: BigNumberish;
        endTime: BigNumberish;
        zoneHash: BytesLike;
        salt: BigNumberish;
        conduitKey: BytesLike;
        totalOriginalConsiderationItems: BigNumberish;
      };
      numerator: BigNumberish;
      denominator: BigNumberish;
      signature: BytesLike;
      extraData: BytesLike;
    },
    criteriaResolvers: {
      orderIndex: BigNumberish;
      side: BigNumberish;
      index: BigNumberish;
      identifier: BigNumberish;
      criteriaProof: BytesLike[];
    }[],
    fulfillerConduitKey: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAllOffers(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimableNFTs(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getOfferBalanceAddrOrdersLength(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getUserOffers(
    user: string,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    nftAddress_: string,
    marketplaceAddress_: string,
    curFloorPrice_: BigNumberish,
    offerPriceUnit_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  makeOffer(
    price: BigNumberish,
    offerCount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    cancelOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimNFTs(
      tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    execute(
      price: BigNumberish,
      advancedOrder: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      criteriaResolvers: {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      fulfillerConduitKey: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getAllOffers(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableNFTs(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getOfferBalanceAddrOrdersLength(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOffers(
      user: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      nftAddress_: string,
      marketplaceAddress_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    makeOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "CancelledOffer(address,uint256,uint256)"(
      user?: string | null,
      price?: BigNumberish | null,
      offerCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; price: BigNumber; offerCount: BigNumber }
    >;

    CancelledOffer(
      user?: string | null,
      price?: BigNumberish | null,
      offerCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; price: BigNumber; offerCount: BigNumber }
    >;

    "MadeOffer(address,uint256,uint256)"(
      user?: string | null,
      price?: BigNumberish | null,
      offerCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; price: BigNumber; offerCount: BigNumber }
    >;

    MadeOffer(
      user?: string | null,
      price?: BigNumberish | null,
      offerCount?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { user: string; price: BigNumber; offerCount: BigNumber }
    >;
  };

  estimateGas: {
    cancelOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimNFTs(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    execute(
      price: BigNumberish,
      advancedOrder: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      criteriaResolvers: {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      fulfillerConduitKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAllOffers(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimableNFTs(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getOfferBalanceAddrOrdersLength(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserOffers(
      user: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      nftAddress_: string,
      marketplaceAddress_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    makeOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    cancelOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimNFTs(
      tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    execute(
      price: BigNumberish,
      advancedOrder: {
        parameters: {
          offerer: string;
          zone: string;
          offer: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
          }[];
          consideration: {
            itemType: BigNumberish;
            token: string;
            identifierOrCriteria: BigNumberish;
            startAmount: BigNumberish;
            endAmount: BigNumberish;
            recipient: string;
          }[];
          orderType: BigNumberish;
          startTime: BigNumberish;
          endTime: BigNumberish;
          zoneHash: BytesLike;
          salt: BigNumberish;
          conduitKey: BytesLike;
          totalOriginalConsiderationItems: BigNumberish;
        };
        numerator: BigNumberish;
        denominator: BigNumberish;
        signature: BytesLike;
        extraData: BytesLike;
      },
      criteriaResolvers: {
        orderIndex: BigNumberish;
        side: BigNumberish;
        index: BigNumberish;
        identifier: BigNumberish;
        criteriaProof: BytesLike[];
      }[],
      fulfillerConduitKey: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAllOffers(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getClaimableNFTs(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getOfferBalanceAddrOrdersLength(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserOffers(
      user: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      nftAddress_: string,
      marketplaceAddress_: string,
      curFloorPrice_: BigNumberish,
      offerPriceUnit_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    makeOffer(
      price: BigNumberish,
      offerCount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
